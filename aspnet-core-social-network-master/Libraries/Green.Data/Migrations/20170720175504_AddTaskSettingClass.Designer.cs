// <auto-generated />
using Green.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Green.Data.Migrations
{
    [DbContext(typeof(GreenObjectContext))]
    [Migration("20170720175504_AddTaskSettingClass")]
    partial class AddTaskSettingClass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-preview2-25794")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Green.Core.Domain.Circles.Circle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CircleName");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("FollowersCounter");

                    b.Property<int>("FollowingCounter");

                    b.Property<bool>("IsSystem");

                    b.Property<Guid>("Key");

                    b.HasKey("Id");

                    b.ToTable("Circle");
                });

            modelBuilder.Entity("Green.Core.Domain.Circles.UserCircle", b =>
                {
                    b.Property<int>("CircleId");

                    b.Property<int>("UserId");

                    b.Property<bool>("IsOwner");

                    b.HasKey("CircleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCircle");
                });

            modelBuilder.Entity("Green.Core.Domain.Comments.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<Guid>("Key");

                    b.Property<int>("PostId");

                    b.Property<int>("Score");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Green.Core.Domain.Configuration.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<Guid>("Key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Green.Core.Domain.ImageGallery.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("ImageName");

                    b.Property<Guid>("Key");

                    b.Property<int>("OwnerUserId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Green.Core.Domain.Notifies.Notify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Description");

                    b.Property<bool>("IsNotifier");

                    b.Property<bool>("IsSeen");

                    b.Property<Guid>("Key");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notify");
                });

            modelBuilder.Entity("Green.Core.Domain.Posts.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<int>("CommnetCounter");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DeletedDateOnUtc");

                    b.Property<bool>("DisableComment");

                    b.Property<bool>("DisableSharing");

                    b.Property<int>("ImageId");

                    b.Property<Guid>("Key");

                    b.Property<DateTime>("LastEditOnUtc");

                    b.Property<int>("OwnerUserId");

                    b.Property<int>("PostTypeId");

                    b.Property<int>("Score");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Green.Core.Domain.Tasks.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Enabled");

                    b.Property<Guid>("Key");

                    b.Property<DateTime?>("LastEndUtc");

                    b.Property<DateTime?>("LastStartUtc");

                    b.Property<DateTime?>("LastSuccessUtc");

                    b.Property<string>("LeasedByMachineName");

                    b.Property<DateTime?>("LeasedUntilUtc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Seconds");

                    b.Property<bool>("StopOnError");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("Green.Core.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("AvatarId");

                    b.Property<int>("BannerId");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(1000);

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<string>("FullName");

                    b.Property<Guid>("Key");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<string>("Password");

                    b.Property<string>("TagLine");

                    b.Property<string>("UserName")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Green.Core.Domain.Votes.Vote", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<int>("VoterId");

                    b.Property<DateTime>("CreatedDateOnUtc");

                    b.Property<Guid>("Key");

                    b.HasKey("PostId", "VoterId");

                    b.HasIndex("VoterId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Green.Core.Domain.Circles.UserCircle", b =>
                {
                    b.HasOne("Green.Core.Domain.Circles.Circle", "Circle")
                        .WithMany("UserCircles")
                        .HasForeignKey("CircleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Green.Core.Domain.Users.User", "User")
                        .WithMany("UserCircles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Green.Core.Domain.Comments.Comment", b =>
                {
                    b.HasOne("Green.Core.Domain.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Green.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Green.Core.Domain.ImageGallery.Image", b =>
                {
                    b.HasOne("Green.Core.Domain.Users.User", "Owner")
                        .WithMany("Images")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Green.Core.Domain.Notifies.Notify", b =>
                {
                    b.HasOne("Green.Core.Domain.Users.User", "User")
                        .WithMany("Notifies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Green.Core.Domain.Posts.Post", b =>
                {
                    b.HasOne("Green.Core.Domain.Users.User", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Green.Core.Domain.Votes.Vote", b =>
                {
                    b.HasOne("Green.Core.Domain.Posts.Post", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Green.Core.Domain.Users.User", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
